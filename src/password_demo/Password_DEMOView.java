package password_demo;

import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;

/**
 * The application's main frame.
 */
public class Password_DEMOView extends FrameView {

    //Tharindu's codes (START)
    private JFrame controllingFrame; //needed for dialogs
    private byte[] rc2EncryptedData;
    private byte[] rc4EncryptedData;
    private byte[] hybridCypher;     
    private long  startTime;
    private long  endTime;
    Long elapsedTime;
    private String shaValue;
    //Tharindu's codes (END)
       
    public Password_DEMOView(SingleFrameApplication app) {
        super(app);

        initComponents();

        //Tharindu's codes (START)
        jCmbEncryptAlgo.setEnabled(false);
        jBtnEncrypt.setEnabled(false);
        jBtnSave.setEnabled(false);       
        //Tharindu's codes (END) 


        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
        
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = Password_DEMOApp.getApplication().getMainFrame();
            aboutBox = new Password_DEMOAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        Password_DEMOApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jLblEnterStr = new javax.swing.JLabel();
        jFldEnterStr = new javax.swing.JTextField();
        jLblConfirmStr = new javax.swing.JLabel();
        jFldConfirmStr = new javax.swing.JTextField();
        jLblEncryptAlgo = new javax.swing.JLabel();
        jCmbEncryptAlgo = new javax.swing.JComboBox();
        jLblEncryptionTime = new javax.swing.JLabel();
        jFldEncryptionTime = new javax.swing.JTextField();
        jLblEncryptedData = new javax.swing.JLabel();
        jFldEncryptedData = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLblSecrecyValue = new javax.swing.JLabel();
        jFldSecrecyValue = new javax.swing.JTextField();
        jBtnEncrypt = new javax.swing.JButton();
        jBtnSave = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setMaximumSize(new java.awt.Dimension(400, 200));
        mainPanel.setMinimumSize(new java.awt.Dimension(400, 200));
        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(400, 250));
        mainPanel.setVerifyInputWhenFocusTarget(false);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(password_demo.Password_DEMOApp.class).getContext().getResourceMap(Password_DEMOView.class);
        jLblEnterStr.setText(resourceMap.getString("jLblEnterStr.text")); // NOI18N
        jLblEnterStr.setName("jLblEnterStr"); // NOI18N

        jFldEnterStr.setName("jEnteredString"); // NOI18N
        jFldEnterStr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jFldEnterStrFocusGained(evt);
            }
        });

        jLblConfirmStr.setText(resourceMap.getString("jLblConfirmStr.text")); // NOI18N
        jLblConfirmStr.setName("jLblConfirmStr"); // NOI18N

        jFldConfirmStr.setName("jConfirmString"); // NOI18N
        jFldConfirmStr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldConfirmStrActionPerformed(evt);
            }
        });
        jFldConfirmStr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldConfirmStrFocusLost(evt);
            }
        });
        jFldConfirmStr.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jFldConfirmStrKeyTyped(evt);
            }
        });

        jLblEncryptAlgo.setText(resourceMap.getString("jLblEncryptAlgo.text")); // NOI18N
        jLblEncryptAlgo.setName("jLblEncryptAlgo"); // NOI18N

        jCmbEncryptAlgo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DES", "3DES", "AES", "RC2", "RC4", "Hybrid1(3DES+RC4)", "Hybrid2(AES+RC4)", " " }));
        jCmbEncryptAlgo.setName("jCmbEncryptAlgo"); // NOI18N
        jCmbEncryptAlgo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbEncryptAlgoActionPerformed(evt);
            }
        });

        jLblEncryptionTime.setText(resourceMap.getString("jLblEncryptionTime.text")); // NOI18N
        jLblEncryptionTime.setName("jLblEncryptionTime"); // NOI18N

        jFldEncryptionTime.setEditable(false);
        jFldEncryptionTime.setText(resourceMap.getString("jFldEncryptionTime.text")); // NOI18N
        jFldEncryptionTime.setToolTipText(resourceMap.getString("jFldEncryptionTime.toolTipText")); // NOI18N
        jFldEncryptionTime.setName("jFldEncryptionTime"); // NOI18N

        jLblEncryptedData.setText(resourceMap.getString("jLblEncryptedData.text")); // NOI18N
        jLblEncryptedData.setName("jLblEncryptedData"); // NOI18N

        jFldEncryptedData.setEditable(false);
        jFldEncryptedData.setText(resourceMap.getString("jFldEncryptedData.text")); // NOI18N
        jFldEncryptedData.setToolTipText(resourceMap.getString("jFldEncryptedData.toolTipText")); // NOI18N
        jFldEncryptedData.setName("jFldEncryptedData"); // NOI18N

        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new java.awt.CardLayout());

        jLblSecrecyValue.setText(resourceMap.getString("jLblSecrecyValue.text")); // NOI18N
        jLblSecrecyValue.setName("jLblSecrecyValue"); // NOI18N

        jFldSecrecyValue.setEditable(false);
        jFldSecrecyValue.setText(resourceMap.getString("jFldSecrecyValue.text")); // NOI18N
        jFldSecrecyValue.setName("jFldSecrecyValue"); // NOI18N

        jBtnEncrypt.setText(resourceMap.getString("jOK.text")); // NOI18N
        jBtnEncrypt.setActionCommand(resourceMap.getString("jOK.actionCommand")); // NOI18N
        jBtnEncrypt.setFocusable(false);
        jBtnEncrypt.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBtnEncrypt.setName("jOK"); // NOI18N
        jBtnEncrypt.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBtnEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEncryptActionPerformed(evt);
            }
        });

        jBtnSave.setText(resourceMap.getString("jBtnSave.text")); // NOI18N
        jBtnSave.setFocusable(false);
        jBtnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBtnSave.setMaximumSize(new java.awt.Dimension(100, 25));
        jBtnSave.setMinimumSize(new java.awt.Dimension(100, 25));
        jBtnSave.setName("jBtnSave"); // NOI18N
        jBtnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblEncryptedData)
                            .addComponent(jLblEncryptAlgo)
                            .addComponent(jLblEncryptionTime)
                            .addComponent(jLblEnterStr)
                            .addComponent(jLblConfirmStr))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jCmbEncryptAlgo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jFldEncryptedData)
                            .addComponent(jFldEncryptionTime)
                            .addComponent(jFldConfirmStr)
                            .addComponent(jFldEnterStr, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                            .addComponent(jFldSecrecyValue))
                        .addGap(48, 48, 48)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41))
                    .addComponent(jBtnEncrypt)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(jBtnSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(91, 91, 91))
                    .addComponent(jLblSecrecyValue, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLblEnterStr)
                            .addComponent(jFldEnterStr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jFldConfirmStr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblConfirmStr))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLblEncryptAlgo)
                            .addComponent(jCmbEncryptAlgo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLblEncryptionTime)
                            .addComponent(jFldEncryptionTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLblEncryptedData)
                            .addComponent(jFldEncryptedData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLblSecrecyValue)
                            .addComponent(jFldSecrecyValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 175, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBtnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBtnEncrypt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28))
        );

        mainPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBtnEncrypt, jBtnSave});

        jLblEnterStr.getAccessibleContext().setAccessibleName(resourceMap.getString("jEnterPassword.AccessibleContext.accessibleName")); // NOI18N
        jLblConfirmStr.getAccessibleContext().setAccessibleName(resourceMap.getString("jConfirmPassword.AccessibleContext.accessibleName")); // NOI18N
        jFldConfirmStr.getAccessibleContext().setAccessibleName(resourceMap.getString("jConfirmPassword.AccessibleContext.accessibleName")); // NOI18N
        jLblEncryptAlgo.getAccessibleContext().setAccessibleName(resourceMap.getString("jLabel3.AccessibleContext.accessibleName")); // NOI18N
        jLblEncryptionTime.getAccessibleContext().setAccessibleName(resourceMap.getString("jLabel4.AccessibleContext.accessibleName")); // NOI18N
        jFldEncryptionTime.getAccessibleContext().setAccessibleName(resourceMap.getString("jTextField3.AccessibleContext.accessibleName")); // NOI18N
        jLblSecrecyValue.getAccessibleContext().setAccessibleName(resourceMap.getString("jLblSecrecyValue.AccessibleContext.accessibleName")); // NOI18N

        mainPanel.getAccessibleContext().setAccessibleName(resourceMap.getString("mainPanel.AccessibleContext.accessibleName")); // NOI18N

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(password_demo.Password_DEMOApp.class).getContext().getActionMap(Password_DEMOView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 230, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        statusPanel.getAccessibleContext().setAccessibleName(resourceMap.getString("statusPanel.AccessibleContext.accessibleName")); // NOI18N

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEncryptActionPerformed

        //Tharindu's codes (START)
        byte[] encryptionBytes = null;
       
        if ((jFldEnterStr.getText().toString() == null ? "" != null : !jFldEnterStr.getText().toString().equals("")) && (jFldConfirmStr.getText().toString() == null ? "" != null : !jFldConfirmStr.getText().toString().equals("")))
        {
            if (jFldConfirmStr.getText() == null ? jFldEnterStr.getText() == null : jFldConfirmStr.getText().equals(jFldEnterStr.getText()))
            {
                //1.DES
                if (jCmbEncryptAlgo.getSelectedItem().toString() == null ? "DES" == null : jCmbEncryptAlgo.getSelectedItem().toString().equals("DES"))
                {
                    try {
                        DES.setUp();
                    } catch (Exception ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    try {
                        //Get the current system time in milliseconds
                        startTime = System.currentTimeMillis();
                        encryptionBytes = DES.DES_Encrypt((jFldConfirmStr.getText()).toString());
                    } catch (InvalidKeyException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (BadPaddingException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalBlockSizeException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    //Get the current system time in milliseconds
                    endTime = System.currentTimeMillis();

                    //Calculate the elapsed time in milliseconds
                    elapsedTime = TimeCalculation.GetTimeElapsed(startTime, endTime);

                    //Now we are going to calculate the secrecy of DES
                    double secrecy = SecrecyCalculator.calculateSecrecy(DES.key.toString().getBytes(), encryptionBytes, 1);
                    
                    jFldEncryptedData.setText(encryptionBytes.toString());
                    jFldEncryptionTime.setText(elapsedTime.toString());
                    jFldSecrecyValue.setText(Double.toString(secrecy));

                    //Get the current system time
                    TimeCalculation.GetCurrTime();
                }
                
                //2.TripleDES
                if (jCmbEncryptAlgo.getSelectedItem().toString() == null ? "3DES" == null : jCmbEncryptAlgo.getSelectedItem().toString().equals("3DES"))
                {
                    try {
                        TripleDES.setUp();
                    } catch (Exception ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    encryptionBytes = null;
                    try {
                        //Get the current system time in milliseconds
                        startTime = System.currentTimeMillis();
                        encryptionBytes = TripleDES.DES_Encrypt((jFldConfirmStr.getText()).toString());
                    } catch (InvalidKeyException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (BadPaddingException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalBlockSizeException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    //Get the current system time in milliseconds
                    endTime = System.currentTimeMillis();

                    //Calculate the elapsed time in milliseconds
                    elapsedTime = TimeCalculation.GetTimeElapsed(startTime, endTime);

                    //Now we are going to calculate the secrecy of 3DES
                    double secrecy = SecrecyCalculator.calculateSecrecy(TripleDES.key.toString().getBytes(), encryptionBytes, 1);

                    jFldEncryptedData.setText(encryptionBytes.toString());
                    jFldEncryptionTime.setText(elapsedTime.toString());
                    jFldSecrecyValue.setText(Double.toString(secrecy));

                    //Get the current system time
                    TimeCalculation.GetCurrTime();
                }

                //3.AES
                if (jCmbEncryptAlgo.getSelectedItem().toString() == null ? "AES" == null : jCmbEncryptAlgo.getSelectedItem().toString().equals("AES"))
                {
                    try {
                        AES.setUp();
                    } catch (Exception ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    encryptionBytes = null;
                    try {
                        //Get the current system time in milliseconds
                        startTime       = System.currentTimeMillis();
                        encryptionBytes = AES.AES_Encrypt((jFldConfirmStr.getText()).toString());
                    } catch (InvalidKeyException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (BadPaddingException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalBlockSizeException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    //Get the current system time in milliseconds
                    endTime = System.currentTimeMillis();

                    //Calculate the elapsed time in milliseconds
                    elapsedTime = TimeCalculation.GetTimeElapsed(startTime, endTime);

                    //Now we are going to calculate the secrecy of AES
                    double secrecy = SecrecyCalculator.calculateSecrecy(AES.key.toString().getBytes(), encryptionBytes, 1);

                    jFldEncryptedData.setText(encryptionBytes.toString());
                    jFldEncryptionTime.setText(elapsedTime.toString());
                    jFldSecrecyValue.setText(Double.toString(secrecy));

                    //Get the current system time
                    TimeCalculation.GetCurrTime();
                }

                 //4.RC2
                if (jCmbEncryptAlgo.getSelectedItem().toString() == null ? "RC2" == null : jCmbEncryptAlgo.getSelectedItem().toString().equals("RC2"))
                {
                    try {
                        RC2.setUp();
                    } catch (Exception ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        //Get the current system time in milliseconds
                        startTime        = System.currentTimeMillis();
                        rc2EncryptedData = RC2.RC2_Encrypt(jFldConfirmStr.getText().toString());
                    } catch (InvalidKeyException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (BadPaddingException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalBlockSizeException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    //Get the current system time in milliseconds
                    endTime = System.currentTimeMillis();

                    //Calculate the elapsed time in milliseconds
                    elapsedTime = TimeCalculation.GetTimeElapsed(startTime, endTime);

                    //Now we are going to calculate the secrecy of RC2
                    double secrecy = SecrecyCalculator.calculateSecrecy(RC2.key.toString().getBytes(), rc2EncryptedData, 1);

                    jFldEncryptedData.setText(rc2EncryptedData.toString());
                    jFldEncryptionTime.setText(elapsedTime.toString());
                    jFldSecrecyValue.setText(Double.toString(secrecy));

                    //Get the current system time
                    TimeCalculation.GetCurrTime();


                }

                //5.RC4
                if (jCmbEncryptAlgo.getSelectedItem().toString() == null ? "RC4" == null : jCmbEncryptAlgo.getSelectedItem().toString().equals("RC4"))
                {
                    try {
                        RC4.setUp();
                    } catch (Exception ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        //Get the current system time in milliseconds
                        startTime        = System.currentTimeMillis();
                        rc4EncryptedData = RC4.RC4_Encrypt(jFldConfirmStr.getText().toString());
                    } catch (InvalidKeyException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (BadPaddingException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalBlockSizeException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    //Get the current system time in milliseconds
                    endTime = System.currentTimeMillis();

                    //Calculate the elapsed time in milliseconds
                    elapsedTime = TimeCalculation.GetTimeElapsed(startTime, endTime);

                    //Now we are going to calculate the secrecy of RC4
                    double secrecy = SecrecyCalculator.calculateSecrecy(RC4.key.toString().getBytes(), rc4EncryptedData, 1);

                    jFldEncryptedData.setText(rc4EncryptedData.toString());
                    jFldEncryptionTime.setText(elapsedTime.toString());
                    jFldSecrecyValue.setText(Double.toString(secrecy));

                    //Get the current system time
                    TimeCalculation.GetCurrTime();
                }

                //6.Tharindu's first hybrid (3DES+RC4)
                if (jCmbEncryptAlgo.getSelectedItem().toString() == null ? "Hybrid1(3DES+RC4)" == null : jCmbEncryptAlgo.getSelectedItem().toString().equals("Hybrid1(3DES+RC4)"))
                {
                    try {
                        TWFirstHybrid.setUp();
                    } catch (Exception ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                   
                    try {
                        //Get the current system time in milliseconds
                        startTime    = System.currentTimeMillis();
                        hybridCypher = TWFirstHybrid.HybridEncryption(jFldConfirmStr.getText().toString());
                    } catch (InvalidKeyException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (BadPaddingException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalBlockSizeException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    //Get the current system time in milliseconds
                    endTime = System.currentTimeMillis();

                    //Calculate the elapsed time in milliseconds
                    elapsedTime = TimeCalculation.GetTimeElapsed(startTime, endTime);

                    //Now we are going to calculate the secrecy of the first Hybrid
                    double secrecy = SecrecyCalculator.calculateSecrecy(TripleDES.key.toString().getBytes(), hybridCypher, 1);

                    jFldEncryptedData.setText(hybridCypher.toString());
                    jFldEncryptionTime.setText(elapsedTime.toString());
                    jFldSecrecyValue.setText(Double.toString(secrecy));
                    //Get the current system time
                    TimeCalculation.GetCurrTime();
                        
                }

                //7.Tharindu's second hybrid (AES+RC4)
                if (jCmbEncryptAlgo.getSelectedItem().toString() == null ? "Hybrid2(AES+RC4)" == null : jCmbEncryptAlgo.getSelectedItem().toString().equals("Hybrid2(AES+RC4)"))
                {
                    try {
                        TWSecondHybrid.setUp();
                    } catch (Exception ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    try {
                        //Get the current system time in milliseconds
                        startTime = System.currentTimeMillis();
                        hybridCypher = TWSecondHybrid.HybridEncryption(jFldConfirmStr.getText().toString());
                    } catch (InvalidKeyException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (BadPaddingException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalBlockSizeException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    //Get the current system time in milliseconds
                    endTime = System.currentTimeMillis();

                    //Calculate the elapsed time in milliseconds
                    elapsedTime = TimeCalculation.GetTimeElapsed(startTime, endTime);

                    //Now we are going to calculate the secrecy of the second Hybrid
                    double secrecy = SecrecyCalculator.calculateSecrecy(AES.key.toString().getBytes(), hybridCypher, 1);

                    jFldEncryptedData.setText(hybridCypher.toString());
                    jFldEncryptionTime.setText(elapsedTime.toString());
                    jFldSecrecyValue.setText(Double.toString(secrecy));
                    
                    //Get the current system time
                    TimeCalculation.GetCurrTime();

                }               

                //8.SHA-1
                if (jCmbEncryptAlgo.getSelectedItem().toString() == null ? "SHA-1" == null : jCmbEncryptAlgo.getSelectedItem().toString().equals("SHA-1"))
                {
                    try {
                         //Get the current system time in milliseconds
                        startTime       = System.currentTimeMillis();
                        shaValue = SHA1.ApplySHA_1(jFldConfirmStr.getText().toString());
                    } catch (NoSuchAlgorithmException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (UnsupportedEncodingException ex) {
                        Logger.getLogger(Password_DEMOView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //Get the current system time in milliseconds
                    endTime = System.currentTimeMillis();

                    //Calculate the elapsed time in milliseconds
                    elapsedTime = TimeCalculation.GetTimeElapsed(startTime, endTime);

                    //Now we are going to calculate the entropy of SHA-1
                    double entropy = SecrecyCalculator.calculateEntropy(shaValue.getBytes(), 1, shaValue.length()-1);

                    jLblSecrecyValue.setName("Entropy of Hash Value:");
                    jFldEncryptedData.setText(shaValue.toString());
                    jFldEncryptionTime.setText(elapsedTime.toString());
                    jFldSecrecyValue.setText(Double.toString(entropy));

                    //Get the current system time
                    TimeCalculation.GetCurrTime();
                }

                jBtnSave.setEnabled(true);                
            }
            else
            {
                JOptionPane.showMessageDialog(controllingFrame, "Strings don't match! Try again.", "Error Message", JOptionPane.ERROR_MESSAGE);
                jFldEnterStr.setFocusable(true);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(controllingFrame, "Strings are empty! Try again.", "Error Message", JOptionPane.ERROR_MESSAGE);
            jFldEnterStr.setFocusable(true);
        }
        
        //Tharindu's codes (END)
    }//GEN-LAST:event_jBtnEncryptActionPerformed

    private void jCmbEncryptAlgoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbEncryptAlgoActionPerformed
        //Tharindu's codes (START)
        // We have to clear the time and encrypted data field
        jFldEncryptionTime.setText(null);
        jFldEncryptedData.setText(null);
        jFldSecrecyValue.setText(null);
        jBtnSave.setEnabled(false);
        //Tharindu's codes (END)
    }//GEN-LAST:event_jCmbEncryptAlgoActionPerformed

    private void jBtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSaveActionPerformed
        // Write the encrypted text into a file
        FileUtil newFile = new FileUtil();
        newFile.writeToFile("C:/Password_Demo/test.txt","Plain Text: ", true, false);
        newFile.writeToFile("C:/Password_Demo/test.txt",jFldConfirmStr.getText(), true, false);
        newFile.writeToFile("C:/Password_Demo/test.txt"," | ", true, false);
        newFile.writeToFile("C:/Password_Demo/test.txt"," Encryption Algo: ", true, false);
        newFile.writeToFile("C:/Password_Demo/test.txt",jCmbEncryptAlgo.getSelectedItem().toString(), true, false);
        newFile.writeToFile("C:/Password_Demo/test.txt"," | ", true, false);
        newFile.writeToFile("C:/Password_Demo/test.txt","Cipher Text: ", true, false);
        newFile.writeToFile("C:/Password_Demo/test.txt",jFldEncryptedData.getText(), true, false);
        newFile.writeToFile("C:/Password_Demo/test.txt"," || ", true, false);
        jBtnSave.setEnabled(false);
        JOptionPane.showMessageDialog(controllingFrame, "Original Text, Encryption Algorithm Name & Encrypted Text is saved in a text file in your C drive!", "Information Message", JOptionPane.INFORMATION_MESSAGE);
        jFldEnterStr.setFocusable(true);
    }//GEN-LAST:event_jBtnSaveActionPerformed

    private void jFldConfirmStrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldConfirmStrActionPerformed
        // Check the two strings are the same and if so enable the drop down menu & encrypt button
        if (jFldConfirmStr.getText() == null ? jFldEnterStr.getText() == null : jFldConfirmStr.getText().equals(jFldEnterStr.getText()))
        {
            jBtnEncrypt.setEnabled(true);
            jCmbEncryptAlgo.setEnabled(true);
            jCmbEncryptAlgo.setFocusable(true);
        }
    }//GEN-LAST:event_jFldConfirmStrActionPerformed

    private void jFldConfirmStrKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldConfirmStrKeyTyped
        // Check the two strings are the same and if so enable the drop down menu & encrypt button
        if (jFldConfirmStr.getText() == null ? jFldEnterStr.getText() == null : jFldConfirmStr.getText().equals(jFldEnterStr.getText()))
        {
            jBtnEncrypt.setEnabled(true);
            jCmbEncryptAlgo.setEnabled(true);
            jCmbEncryptAlgo.setFocusable(true);
        }
    }//GEN-LAST:event_jFldConfirmStrKeyTyped

    private void jFldConfirmStrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldConfirmStrFocusLost
        // Check the two strings are the same and if so enable the drop down menu & encrypt button
        if ((jFldEnterStr.getText().toString() == null ? "" != null : !jFldEnterStr.getText().toString().equals("")) && (jFldConfirmStr.getText().toString() == null ? "" != null : !jFldConfirmStr.getText().toString().equals("")))
        {
            if (jFldConfirmStr.getText() == null ? jFldEnterStr.getText() == null : jFldConfirmStr.getText().equals(jFldEnterStr.getText()))
            {
                jBtnEncrypt.setEnabled(true);
                jCmbEncryptAlgo.setEnabled(true);
                jCmbEncryptAlgo.setFocusable(true);
            }
        }
    }//GEN-LAST:event_jFldConfirmStrFocusLost

    private void jFldEnterStrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldEnterStrFocusGained
        jBtnEncrypt.setEnabled(false);
        jBtnSave.setEnabled(false);        
        jFldEncryptedData.setText(null);
        jFldSecrecyValue.setText(null);
        jFldEncryptionTime.setText(null);       

    }//GEN-LAST:event_jFldEnterStrFocusGained

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnEncrypt;
    private javax.swing.JButton jBtnSave;
    private javax.swing.JComboBox jCmbEncryptAlgo;
    private javax.swing.JTextField jFldConfirmStr;
    private javax.swing.JTextField jFldEncryptedData;
    private javax.swing.JTextField jFldEncryptionTime;
    private javax.swing.JTextField jFldEnterStr;
    private javax.swing.JTextField jFldSecrecyValue;
    private javax.swing.JLabel jLblConfirmStr;
    private javax.swing.JLabel jLblEncryptAlgo;
    private javax.swing.JLabel jLblEncryptedData;
    private javax.swing.JLabel jLblEncryptionTime;
    private javax.swing.JLabel jLblEnterStr;
    private javax.swing.JLabel jLblSecrecyValue;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
